' Gambas class file

Public Const State_InHeader As Short = 0
Public Const State_InChunk As Short = 1

Static Public Function ReadFile(FileName As String) As WavFile

  Dim Model As New WavFile
  Dim State As Short = State_InHeader
  Dim DataFile As File
  Dim FormatChunk As WavChunkFormat
  Dim DataChunk As WavChunkData
  Dim FactChunk As WavChunkFact
  Dim ChunkId As String
  Dim x As Integer
  Dim Data As Byte

  DataFile = Open FileName For Read

  Do While Not Eof(DataFile)
    Select Case State

      Case State_InHeader
        Model.GroupID = ReadString(DataFile, 4)
        Model.FileLength = ReadInteger(DataFile, 4)
        Model.RiffType = ReadString(DataFile, 4)
        State = State_InChunk

      Case State_InChunk
        ChunkId = Lower(ReadString(DataFile, 4))
        Select Case ChunkId

          Case "fmt "
            FormatChunk = New WavChunkFormat
            With FormatChunk
              .ChunkID = ChunkId
              .ChunkSize = ReadLong(DataFile, 4)
              .FormatTag = ReadInteger(DataFile, 2)
              .Channels = ReadInteger(DataFile, 2)
              .SamplesPerSec = ReadLong(DataFile, 4)
              .AvgBytesPerSec = ReadLong(DataFile, 4)
              .BlockAlign = ReadInteger(DataFile, 2)
              .BitsPerSample = ReadInteger(DataFile, 2)
            End With
            Model.FormatChunks.Add(FormatChunk)

          Case "data"
            DataChunk = New WavChunkData
            With DataChunk
              .ChunkID = ChunkId
              .ChunkSize = ReadLong(DataFile, 4)

              If FormatChunk And If FormatChunk.BitsPerSample = 16 Then
                For x = 1 To .ChunkSize Step 2
                  .ShortArray.Add(ReadSignedShort(datafile, 2))
                Next
              Else
                For x = 1 To .ChunkSize
                  .ByteArray.Add(ReadByte(DataFile))
                Next
              Endif

            End With
            Model.DataChunks.Add(DataChunk)

          Case "fact"
            FactChunk = New WavChunkFact
            With FactChunk
              .ChunkID = ChunkId
              .ChunkSize = ReadLong(DataFile, 4)
              .NumSamples = ReadLong(DataFile, 4)
            End With
            Model.FactChunks.Add(DataChunk)

          Case Else
            Print "Found: Chunk Id: " & ChunkId

        End Select

    End Select
  Loop

  DataFile.Close

  Return Model

End

Static Private Function ReadByte(OpenFile As File) As Byte

  Dim Data As Byte

  Read #OpenFile, Data
  Return Data

End

Static Private Function ReadString(OpenFile As File, Length As Integer) As String

  Dim ReturnValue As String
  Dim Data As Byte
  Dim x As Integer

  For x = 1 To Length
    Read #OpenFile, Data
    ReturnValue &= String.Chr(Data)
  Next
  Return ReturnValue

End

Static Private Function ReadInteger(OpenFile As File, Length As Integer) As Integer

  Dim ReturnValue As Integer
  Dim Data As Byte
  Dim x As Integer

  For x = 0 To Length - 1
    Read #OpenFile, Data
    If x = 0 Then
      Returnvalue = Data
    Else
      ReturnValue += Data * (2 ^ (8 * x))
    Endif
  Next
  Return ReturnValue

End

Static Private Function ReadSignedShort(OpenFile As File, Length As Integer) As Short

  Dim ReturnValue As Integer
  Dim Data As Byte
  Dim x As Integer

  For x = 0 To Length - 1
    Read #OpenFile, Data
    If x = 0 Then
      Returnvalue = Data
    Else
      ReturnValue += Data * (2 ^ (8 * x))
    Endif
  Next

  Return cSigned(ReturnValue)

End

Static Private Function cSigned(Value As Integer) As Short

  If Value < 32768
    Return Value
  Else
    Return Value - 65536
  End If

End

Static Private Function ReadLong(OpenFile As File, Length As Integer) As Long

  Dim ReturnValue As Long
  Dim Data As Byte
  Dim x As Integer

  For x = 0 To Length - 1
    Read #OpenFile, Data
    If x = 0 Then
      Returnvalue = Data
    Else
      ReturnValue += Data * (2 ^ (8 * x))
    Endif
  Next
  Return ReturnValue

End
