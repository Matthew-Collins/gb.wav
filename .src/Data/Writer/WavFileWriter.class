' Gambas class file

Static Public Sub WriteFile(Model As WavFile, FileName As String)

  Dim DataFile As File
  Dim FormatChunk As WavChunkFormat
  Dim DataChunk As WavChunkData
  Dim FactChunk As WavChunkFact
  Dim ShortValue As Short
  Dim ByteValue As Byte

  DataFile = Open FileName For Write Create

  Write #DataFile, Model.GroupID
  Write #DataFile, cSignedInteger(Model.NewFileLength()) As Integer
  Write #DataFile, Model.RiffType

  For Each FormatChunk In Model.FormatChunks
    Write #DataFile, FormatChunk.ChunkID
    Write #DataFile, cSignedInteger(FormatChunk.ChunkSize) As Integer
    Write #DataFile, cSignedShort(FormatChunk.FormatTag) As Short
    Write #DataFile, cSignedShort(FormatChunk.Channels) As Short
    Write #DataFile, cSignedInteger(FormatChunk.SamplesPerSec) As Integer
    Write #DataFile, cSignedInteger(FormatChunk.AvgBytesPerSec) As Integer
    Write #DataFile, cSignedShort(FormatChunk.BlockAlign) As Short
    Write #DataFile, cSignedShort(FormatChunk.BitsPerSample) As Short
  Next

  For Each DataChunk In Model.DataChunks
    Write #DataFile, DataChunk.ChunkID
    Write #DataFile, cSignedInteger(DataChunk.NewChunkSize()) As Integer

    If DataChunk.ShortArray.Count > 0 Then
      For Each ShortValue In DataChunk.ShortArray
        Write #DataFile, ShortValue As Short
      Next
    Else
      For Each ByteValue In DataChunk.ByteArray
        Write #DataFile, ByteValue As Byte
      Next
    Endif

  Next

  For Each FactChunk In Model.FactChunks
    Write #DataFile, FactChunk.ChunkID
    Write #DataFile, cSignedInteger(FactChunk.ChunkSize) As Integer
    Write #DataFile, cSignedInteger(FactChunk.NumSamples) As Integer
  Next

  DataFile.Close

End

Static Public Function cSignedInteger(Value As Long) As Integer

  If Value < 2147483648
    Return Value
  Else
    Return Value - 4294967296
  End If

End

Static Private Function cSignedShort(Value As Integer) As Short

  If Value < 32768
    Return Value
  Else
    Return Value - 65536
  End If

End
